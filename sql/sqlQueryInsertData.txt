*****Register*****
INSERT INTO `register`(`UserName`, `Email`, `Password`)
  VALUES ('Md Sami Uddin','shakkhorsami@hotmail.com','passss'),
    ('Arif Imtiaz','arifimtiaz@gmail.com','passai'),
    ('Saikat Chakraborty','saikatchakraborty@yahoo.com','passsc')


*****Teacher*******

INSERT INTO  `teacherprofile` (`Register_Id` , `ImageLink`, `TeacherName` ,  `TeacherAddress` ,  `ContactNo` ,  `Biography_Skill` )
    VALUES ( 1, 'path', 'Md Sami Uddin',  'Dhaka Bangladesh', '017234890',  'Has done BSc in CSE.Expert C programer') ,
    ( 3, 'path', 'Arif Imtiaz',  'Sylhet Bangladesh', '016734890', 'BSc in CSE. Interest Area-Java Programming Language' ) ,
    ( 2, 'path', 'Arif Imtiaz',  'Rangamati Bangladesh', '017234890',  'Has done BSc in CSE.Expert in PHP' )

***Course****
INSERT INTO  `course` (`CourseName` ,  `Description` ,  `StartingDate`)
    VALUES ('C Programming', 'C is a general-purpose, imperative computer programming language,
    supporting structured programming, lexical variable scope and recursion, while a static type
    system prevents many unintended operations. By design, C provides constructs that map
    efficiently to typical machine instructions, and therefore it has found lasting use in
    applications that had formerly been coded in assembly language, including operating systems,
    as well as various application software for computers ranging from supercomputers to embedded systems',
    Now()),
    ('PHP Programming', 'PHP is a server-side scripting language designed for web development but also
    used as a general-purpose programming language. As of January 2013, PHP was installed on more than
    240 million websites (39% of those sampled) and 2.1 million web servers. Originally created by Rasmus
    Lerdorf in 1994,the reference implementation of PHP (powered by the Zend Engine) is now produced by The
    PHP Group. While PHP originally stood for Personal Home Page, it now stands for PHP: Hypertext Preprocessor
    , which is a recursive backronym.', Now()),
    ('Java Programming', 'Java is a general-purpose computer programming language that is concurrent, class-based,
    object-oriented, and specifically designed to have as few implementation dependencies as possible. It is intended
    to let application developers "write once, run anywhere" (WORA), meaning that compiled Java code can run on all
    platforms that support Java without the need for recompilation.Java applications are typically compiled to
    bytecode that can run on any Java virtual machine (JVM) regardless of computer architecture. As of 2015, Java is
    one of the most popular programming languages in use, particularly for client-server web applications, with a
    reported 9 million developers.',
    Now())

*******CHAPTER********
INSERT INTO `chapter`(`Course_Id`,`ChapterName`)
  VALUES (1 , 'C Programming Tutorial')

*********POST****************************
INSERT INTO `Post`(`Chapter_Id`, `Title`,`Date_Of_Post`)
  VALUES (1 , 'Home',Now())

************Document************
INSERT INTO `Document` (`Post_Id` , `Title` , `Type` , `FullDocument`)
  VALUES ( 1 , 'C Tutorial' , 'text' , 'The C is a general-purpose, procedural, imperative computer programming language developed in 1972 by Dennis M. Ritchie at the Bell Telephone Laboratories to develop the UNIX operating system.'),
  (1,'','text','The C is the most widely used computer language, it keeps fluctuating at number one scale of popularity along with Java programming language, which is also equally popular and most widely used among modern software programmers.'),
  (1,'Audience','text','This tutorial is designed for software programmers with a need to understand the C programming language starting from scratch. This tutorial will give you enough understanding on C programming language from where you can take yourself to higher level of expertise.'),
  (1,'Prerequisites','text','Before proceeding with this tutorial, you should have a basic understanding of Computer Programming terminologies. A basic understanding of any of the programming languages will help you in understanding the C programming concepts and move fast on the learning track.'),
  (1,'Execute C Online','text','For most of the examples given in this tutorial you will find Try it option, so just make use of this option to execute your C programs at the spot and enjoy your learning.'),
  (1,'','text','Try following example using Try it option available at the top right corner of the below sample code box âˆ’'),
  (1,'','code','#include <stdio.h>

int main()
{
   /* my first program in C */
   printf("Hello, World! \n");

   return 0;
}')

***************************************************************************************************************************************************************************************************************************************************************************************************************************
*********POST****************************
INSERT INTO `Post`(`Chapter_Id`, `Title`,`Date_Of_Post`)
  VALUES (1 , 'Overview',Now())

************Document************
INSERT INTO `Document` (`Post_Id` , `Title` , `Type` , `FullDocument`)
  VALUES ( 2 ,'Overview','text', 'C is a general-purpose, high-level language that was originally developed by Dennis M. Ritchie to develop the UNIX operating system at Bell Labs. C was originally first implemented on the DEC PDP-11 computer in 1972.'),
  (2,'','text','In 1978, Brian Kernighan and Dennis Ritchie produced the first publicly available description of C, now known as the K&R standard.'),
  (2,'','text','The UNIX operating system, the C compiler, and essentially all UNIX applications programs have been written in C. The C has now become a widely used professional language for various reasons.'),
  (2,'','text',

   '<ul>
      <li>Easy to learn</li>
      <li>Structured language</li>
      <li>It produces efficient programs.</li>
      <li>It can handle low-level activities.</li>
      <li>It can be compiled on a variety of computer platforms.</li>
    </ul>    '),

  (2,'Facts about C','text',

   '<ul>
      <li>C was invented to write an operating system called UNIX.</li>
      <li>C is a successor of B language which was introduced around 1970</li>
      <li>The language was formalized in 1988 by the American National Standard Institute (ANSI).</li>
      <li>The UNIX OS was totally written in C by 1973.</li>
      <li>Today C is the most widely used and popular System Programming Language.</li>
      <li>Most of the state-of-the-art softwares have been implemented using C.</li>
      <li>Today\'s most popular Linux OS and RBDMS MySQL have been written in C.</li>
    </ul>    '),

   (2,'Why to use C?','text','C was initially used for system development work, in particular the programs that make-up the operating system. C was adopted as a system development language because it produces code that runs nearly as fast as code written in assembly language. Some examples of the use of C might be:'),


   (2,'','text',

   '<ul>
      <li>Operating Systems</li>
      <li>Language Compilers</li>
      <li>Assemblers</li>
      <li>Text Editors</li>
      <li>Print Spoolers</li>
      <li>Network Drivers<li>
      <li>Modern Programs</li>
      <li>Databases</li>
      <li>Language Interpreters</li>
      <li>Utilities</li>
   </ul>   '),

  (2,'C Programs','text','A C program can vary from 3 lines to millions of lines and it should be written into one or more text files with extension ".c"; for example, hello.c. You can use "vi", "vim" or any other text editor to write your C program into a file.'),
  (2,'','text','This tutorial assumes that you know how to edit a text file and how to write source code inside a program file.')

  
***********************************************************************************************************************************************************************************************************************************************************************************
************Document3************

INSERT INTO `Document` (`Post_Id` , `Title` , `Type` , `FullDocument`)
  
VALUES ( 3 ,'Try it Option Online','text', 'You really do not need to set up your own environment to start learning C programming language. Reason is very simple, we already have set up C Programming environment online, so that you can compile and execute all the available examples online at the same time when you are doing your theory work. This gives you confidence in what you are reading and to check the result with different options. Feel free to modify any example and execute it online.'),
  

(3,'','text','Try following example using Try it option available at the top right corner of the below sample code box:'),
  

(3,'','code',

'#include <stdio.h>

int main()
{
   /* my first program in C */
   printf("Hello, World! \n");
   
   return 0;
}'),
  



   
(3,'','text','For most of the examples given in this tutorial, you will find Try it option, so just make use of it and enjoy your learning.'), 


   


  
(3,'Local Environment Setup','text','If you are still willing to set up your environment for C programming language, you need the following two softwares available on your computer, (a) Text Editor and (b) The C Compiler.'), 
  
(3,'Text Editor','text','This will be used to type your program. Examples of few editors include Windows Notepad, OS Edit command, Brief, Epsilon, EMACS, and vim or vi.'), 

(3,'','text','Name and version of text editor can vary on different operating systems. For example, Notepad will be used on Windows, and vim or vi can be used on windows as well as Linux or UNIX.'), 

(3,'','text','The files you create with your editor are called source files and contain program source code. The source files for C programs are typically named with the extension ".c".'), 

(3,'','text','Before starting your programming, make sure you have one text editor in place and you have enough experience to write a computer program, save it in a file, compile it and finally execute it.'), 

(3,'The C Compiler','text','The source code written in source file is the human readable source for your program. It needs to be "compiled", to turn into machine language so that your CPU can actually execute the program as per instructions given.'), 

(3,'','text','This C programming language compiler will be used to compile your source code into final executable program. I assume you have basic knowledge about a programming language compiler.'), 

(3,'','text','Most frequently used and free available compiler is GNU C/C++ compiler, otherwise you can have compilers either from HP or Solaris if you have respective Operating Systems.'), 

(3,'','text','Following section guides you on how to install GNU C/C++ compiler on various OS. I\'m mentioning C/C++ together because GNU gcc compiler works for both C and C++ programming languages.'), 

(3,'Installation on UNIX/Linux','text','If you are using Linux or UNIX, then check whether GCC is installed on your system by entering the following command from the command line:'), 

(3,'','code','$ gcc -v'), 

(3,'','text','If you have GNU compiler installed on your machine, then it should print a message something as follows:'), 

(3,'','code',

  'Using built-in specs.
  Target: i386-redhat-linux
  Configured with: ../configure --prefix=/usr .......
  Thread model: posix
  gcc version 4.1.2 20080704 (Red Hat 4.1.2-46)'), 

(3,'','text','If GCC is not installed, then you will have to install it yourself using the detailed instructions available at http://gcc.gnu.org/install/')

***************part2*************
INSERT INTO `Document` (`Post_Id` , `Title` , `Type` , `FullDocument`)
  
VALUES (3,'','text','This tutorial has been written based on Linux and all the given examples have been compiled on Cent OS flavor of Linux system.'), 

(3,'Installation on Mac OS','text','If you use Mac OS X, the easiest way to obtain GCC is to download the Xcode development environment from Apple\'s web site and follow the simple installation instructions. Once you have Xcode setup, you will be able to use GNU compiler for C/C++.'), 

(3,'','text','Xcode is currently available at developer.apple.com/technologies/tools/'), 

(3,'Installation on Windows','text','To install GCC at Windows you need to install MinGW. To install MinGW, go to the MinGW homepage, www.mingw.org, and follow the link to the MinGW download page. Download the latest version of the MinGW installation program, which should be named MinGW-<version>.exe.'), 

(3,'','text','While installing MinWG, at a minimum, you must install gcc-core, gcc-g++, binutils, and the MinGW runtime, but you may wish to install more.'), 

(3,'','text','Add the bin subdirectory of your MinGW installation to your PATH environment variable, so that you can specify these tools on the command line by their simple names.')
*****************part3******************
INSERT INTO `Document` (`Post_Id` , `Title` , `Type` , `FullDocument`)
  
VALUES (3,'','text','When the installation is complete, you will be able to run gcc, g++, ar, ranlib, dlltool, and several other GNU tools from the Windows command line.')
*******************************************************************************************************************************************************************************************
*********POst4************

INSERT INTO `Post`(`Chapter_Id`, `Title`,`Date_Of_Post`)
  VALUES (1 , 'Program Structure',Now())


************Document4************

INSERT INTO `Document` (`Post_Id` , `Title` , `Type` , `FullDocument`)

VALUES(4,'','text','Before we study basic building blocks of the C programming language, let us look a bare minimum C program structure so that we can take it as a reference in upcoming chapters.'), 
 

        (4,'C Hello World Example','text',
                      
               '<ul>
                    <li>Preprocessor Commands</li>
		    <li>Functions</li>
                    <li>Variables</li>
                    <li>Statements & Expressions</li>
                    <li>Comments</li>

                </ul>    '), 

	
        (4,'','text','Let us look at a simple code that would print the words "Hello World":'), 

        (4,'','code',
                    'include <stdio.h>

                      int main()
                        {
                         /* my first program in C */
                         printf("Hello, World! \n");
   
                         return 0;
                         }   '), 

	
	(4,'','text','Let us look various parts of the above program:'), 

	(4,'','text',
                     '<ol>
                         <li>The first line of the program #include <stdio.h> is a preprocessor command, which tells a C compiler to include stdio.h file before going to actual compilation.</li>
		         <li>The next line int main() is the main function where program execution begins.</li>
                         <li>The next line /*...*/ will be ignored by the compiler and it has been put to add additional comments in the program. So such lines are called comments in the program.</li>
                         <li>The next line printf(...) is another function available in C which causes the message "Hello, World!" to be displayed on the screen.</li>
                         <li>The next line return 0; terminates main()function and returns the value 0.</li>

                      </ol>    '),  



        (4,'','text','Lets look at how to save the source code in a file, and how to compile and run it. Following are the simple steps:'), 

	(4,'Compile & Execute C Program:','text',
                                                 '<ol>
                                                     <li> Open a text editor and add the above-mentioned code. </li>
		                                     <li>Save the file as hello.c</li>
                                                     <li>Open a command prompt and go to the directory where you saved the file.</li>
                                                     <li>Type gcc hello.c and press enter to compile your code.</li>
                                                     <li>If there are no errors in your code the command prompt will take you to the next line and would generate a.out executable file.</li>
                                                     <li>Now, type a.out to execute your program.</li>
						     <li>You will be able to see "Hello World" printed on the screen</li>

                                                  </ol>   '), 

	(4,'','text','Lets look at how to save the source code in a file, and how to compile and run it. Following are the simple steps:'), 

	(4,'','text','$ gcc hello.c
                      $ ./a.out
                      Hello, World!'), 

	(4,'','text','Make sure that gcc compiler is in your path and that you are running it in the directory containing source file hello.c.')

********************************************************************************************************************************************************
*******CHAPTER********
INSERT INTO `chapter`(`Course_Id`,`ChapterName`)
  VALUES (2 , 'PHP Programming Tutorial')




*********POST****************************

INSERT INTO `Post`(`Chapter_Id`, `Title`,`Date_Of_Post`)
  VALUES (2 , 'PHP Home',Now())

************Document************

INSERT INTO `Document` (`Post_Id` , `Title` , `Type` , `FullDocument`)
  
VALUES ( 5 ,'PHP Tutorial','text', 'The PHP Hypertext Preprocessor (PHP) is a programming language that allows web developers to create dynamic content that interacts with databases. PHP is basically used for developing web based software applications. This tutorial helps you to build your base with PHP.'),
  
(5,'Audience','text','This tutorial is designed for PHP programmers who are completely unaware of PHP concepts but they have basic understanding on computer programming.'),
  
(5,'Prerequisites','text','Before proceeding with this tutorial you should have at least basic understanding of computer programming, Internet, Database, and MySQL etc is very helpful.'),
  
(5,'Execute PHP Online','text','For most of the examples given in this tutorial you will find Try it option, so just make use of this option to execute your PHP programs at the spot and enjoy your learning.'),

  
(5,'','text','Try following example using Try it option available at the top right corner of the below sample code box âˆ’'),

   
(5,'','code',
              '<html>
                  <head>
                           <title>Online PHP Script Execution</title>
                  </head>
	
                  <body>
                    <?php
                         echo "<h1>Hello, PHP!</h1>";
                     ?>
                  </body>
	
               </html>'), 


   (5,'','text',

   '<ul>
      <li>Operating Systems</li>
      <li>Language Compilers</li>
      <li>Assemblers</li>
      <li>Text Editors</li> 
      <li>Print Spoolers</li> 
      <li>Network Drivers<li>
      <li>Modern Programs</li>
      <li>Databases</li>
      <li>Language Interpreters</li>
      <li>Utilities</li>
   </ul>   ')
   
***************************************************************************************************************************
*********post2***********

INSERT INTO `Post`(`Chapter_Id`, `Title`,`Date_Of_Post`)
  VALUES (2 , 'PHP Introduction',Now())


************Document************
*********** part1 **********************
INSERT INTO `Document` (`Post_Id` , `Title` , `Type` , `FullDocument`)
  
VALUES ( 6 ,'PHP Tutorial','text', 'The PHP Hypertext Preprocessor (PHP) is a programming language that allows web developers to create dynamic content that interacts with databases. PHP is basically used for developing web based software applications. This tutorial helps you to build your base with PHP.')
************** part 2 ********************
INSERT INTO `Document` (`Post_Id` , `Title` , `Type` , `FullDocument`)
  VALUES ( 6 ,'','text', 'PHP started out as a small open source project that evolved as more and more people found out how useful it was. Rasmus Lerdorf unleashed the first version of PHP way back in 1994.')
*************** part 3 *********************
INSERT INTO `Document` (`Post_Id` , `Title` , `Type` , `FullDocument`)
VALUES ( 6 ,'','text', '<ul>
                             <li>PHP is a recursive acronym for "PHP: Hypertext Preprocessor".</li>
                              <li>PHP is a server side scripting language that is embedded in HTML. It is used to manage dynamic content, databases, session tracking, even build entire e-commerce sites.</li>
                              <li>It is integrated with a number of popular databases, including MySQL, PostgreSQL, Oracle, Sybase, Informix, and Microsoft SQL Server.</li>
                              <li>PHP is pleasingly zippy in its execution, especially when compiled as an Apache module on the Unix side. The MySQL server, once started, executes even very complex queries with huge result sets in record-setting time.</li>
                              <li>PHP supports a large number of major protocols such as POP3, IMAP, and LDAP. PHP4 added support for Java and distributed object architectures (COM and CORBA), making n-tier development a possibility for the first time.</li>
                              <li>PHP is forgiving: PHP language tries to be as forgiving as possible.</li>
                              <li>PHP Syntax is C-Like.</li>
                        </ul>         ')

***************** part 4 *****************************
INSERT INTO `Document` (`Post_Id` , `Title` , `Type` , `FullDocument`)
VALUES ( 6 ,'Common uses of PHP','text', 
                        '<ul>
                             <li>PHP performs system functions, i.e. from files on a system it can create, open, read, write, and close them.</li>
                              <li>PHP can handle forms, i.e. gather data from files, save data to a file, thru email you can send data, return data to the user.</li>
                              <li>You add, delete, modify elements within your database thru PHP.</li>
                              <li>Access cookies variables and set cookies.</li>
                             <li>Using PHP, you can restrict users to access some pages of your website.</li>
                              <li>It can encrypt data.</li>
                                
                        </ul>         ')
						
						
************** part 5 ****************************

INSERT INTO `Document` (`Post_Id` , `Title` , `Type` , `FullDocument`)

VALUES ( 6 ,'Characteristics of PHP','text', 'Five important characteristics make PHP\'s practical nature possible:')

********************** part 6 **************************

INSERT INTO `document`(`Post_Id`, `Title`, `Type`, `FullDocument`) 

VALUES ( 6 ,'','text', 
                       '<ul>
                             <li>Simplicity</li>
                              <li>Efficiency</li>
                              <li>Security</li>
                              <li>Flexibility</li>
                             <li>Familiarity</li>
                              
                                
                        </ul>         ')
			
****************** part 7 *******************************

INSERT INTO `document`(`Post_Id`, `Title`, `Type`, `FullDocument`) VALUES ( 6 ,'\"Hello World" Script in PHP','text', 'To get a feel for PHP, first start with simple PHP scripts. Since "Hello, World!" is an essential example, first we will create a friendly little "Hello, World!" script.')

**************** part 8 *****************************

INSERT INTO `document`( `Post_Id`, `Title`, `Type`, `FullDocument`) VALUES ( 6 ,'','text', 'As mentioned earlier, PHP is embedded in HTML. That means that in amongst your normal HTML (or XHTML if you\'re cutting-edge) you\'ll have PHP statements like this:')

************ part 9 ***************
INSERT INTO `document`( `Post_Id`, `Title`, `Type`, `FullDocument`) VALUES ( 6 ,'\"Hello World" Script in PHP','text', 'To get a feel for PHP, first start with simple PHP scripts. Since "Hello, World!" is an essential example, first we will create a friendly little "Hello, World!" script.')

************* part 10 *******************

INSERT INTO `document`( `Post_Id`, `Title`, `Type`, `FullDocument`) VALUES ( 6 ,'','text', 'As mentioned earlier, PHP is embedded in HTML. That means that in amongst your normal HTML (or XHTML if you\'re cutting-edge) you\'ll have PHP statements like this:')

***************** part 11 *********************
INSERT INTO `document`( `Post_Id`, `Title`, `Type`, `FullDocument`) 
VALUES ( 6 ,'','code', 
'<html>
<head>
<title>Hello World</title>
<body>
    <?php echo "Hello, World!";?>
</body>
</html>')

****************** part 12 ******************
INSERT INTO `document`( `Post_Id`, `Title`, `Type`, `FullDocument`) 
VALUES ( 6 ,'','text', 'It will produce following result:'),

VALUES ( 6 ,'','code', 'Hello, World!')

************** part 13 ************************

VALUES ( 6 ,'','text', 'If you examine the HTML output of the above example, you\'ll notice that the PHP code is not present in the file sent from the server to your Web browser. All of the PHP present in the Web page is processed and stripped from the page; the only thing returned to the client from the Web server is pure HTML output.'),


************* part 14 *****************

INSERT INTO `document`( `Post_Id`, `Title`, `Type`, `FullDocument`) VALUES ( 6 ,'','text', 'If you examine the HTML output of the above example, you\'ll notice that the PHP code is not present in the file sent from the server to your Web browser. All of the PHP present in the Web page is processed and stripped from the page; the only thing returned to the client from the Web server is pure HTML output.')

************ part 15 *****************
INSERT INTO `document`( `Post_Id`, `Title`, `Type`, `FullDocument`) VALUES ( 6 ,'','text', 'All PHP code must be included inside one of the three special markup tags ate are recognised by the PHP Parser.')

********** part 16 **************
INSERT INTO `document`( `Post_Id`, `Title`, `Type`, `FullDocument`) 
VALUES ( 6 ,'','code', 
'<?php PHP code goes here ?>

<?    PHP code goes here ?>

<script language="php"> PHP code goes here </script>')
********** part 17 **********
INSERT INTO `document`( `Post_Id`, `Title`, `Type`, `FullDocument`) 

VALUES ( 6 ,'','text', 'Most common tag is the <?php...?> and we will also use same tag in our tutorial.')
************ part 18 ***************
INSERT INTO `document`( `Post_Id`, `Title`, `Type`, `FullDocument`) 
VALUES ( 6 ,'','text', 'From the next chapter we will start with PHP Environment Setup on your machine and then we will dig out almost all concepts related to PHP to make you comfortable with the PHP language.')

*************************************************************************************************************************************************************************************************************************************************************************************************

*******CHAPTER********
INSERT INTO `chapter`(`Course_Id`,`ChapterName`)
  VALUES (2 , 'Advanced PHP')




*********POST****************************

INSERT INTO `Post`(`Chapter_Id`, `Title`,`Date_Of_Post`)
  VALUES (3 , 'PHP - Predefined Variables',Now())

************Document************

  
  INSERT INTO `Document` (`Post_Id` , `Title` , `Type` , `FullDocument`)
  
VALUES ( 7 ,'','text', 'PHP provides a large number of predefined variables to any script which it runs.PHP provides an additional set of predefined arrays containing variables from the web server the environment, and user input. These new arrays are called superglobals:')

  INSERT INTO `Document` (`Post_Id` , `Title` , `Type` , `FullDocument`)
  VALUE(7,'','text','All the following variables are automatically available in every scope.')
  
   INSERT INTO `Document` (`Post_Id` , `Title` , `Type` , `FullDocument`)
  VALUE  
(7,'PHP Superglobals','text',
                             
                '  <table border="1px" cellpadding="5px" cellspacing="1px" >

			<tr>
			  <td><b>Variable</b></td>
			  <td><b>Description</b></td>
			  
			  
			</tr>
                        
                        <tr>
			  <td>$GLOBALS</td>
			  <td>Contains a reference to every variable which is currently available within the global scope of the script. The keys of this array are the names of the global variables.</td>
			  
			 </tr>
                      
                        <tr>
			 <td>$_SERVER</td>
			 <td>This is an array containing information such as headers, paths, and script locations. The entries in this array are created by the web server. There is no guarantee that every web server will provide any of these. See next section for a complete list of all the SERVER variables.</td>
			</tr>


                        <tr>
			 <td>$_GET</td>
			 <td>An associative array of variables passed to the current script via the HTTP GET method.</td>
			</tr>

                        <tr>
			 <td>$_POST</td>
			 <td>An associative array of variables passed to the current script via the HTTP POST method.</td>
			</tr>

                         <tr>
			 <td>$_FILES</td>
			 <td>An associative array of items uploaded to the current script via the HTTP POST method.</td>
			</tr>

                        <tr>
			 <td>$_REQUEST</td>
			 <td>An associative array consisting of the contents of $_GET, $_POST, and $_COOKIE.</td>
			</tr>

                       <tr>
			 <td>$_COOKIE</td>
			 <td>An associative array of variables passed to the current script via HTTP cookies.</td>
			</tr>

                      <tr>
			 <td>$_SESSION</td>
			 <td>An associative array containing session variables available to the current script.</td>
			</tr>

                      <tr>
			 <td>$_PHP_SELF</td>
			 <td>A string containing PHP script file name in which it is called.</td>
			</tr>

                      <tr>
			 <td>$php_errormsg</td>
			 <td>$php_errormsg is a variable containing the text of the last error message generated by PHP.</td>
			</tr>

                           
                   </table>            ')
				   
  INSERT INTO `Document` (`Post_Id` , `Title` , `Type` , `FullDocument`)
  VALUE  
(7,'Server variables: $_SERVER','text','$_SERVER is an array containing information such as headers, paths, and script locations. The entries in this array are created by the web server. There is no guarantee that every web server will provide any of these.')

    INSERT INTO `Document` (`Post_Id` , `Title` , `Type` , `FullDocument`)
  VALUE  

(7,'','text',
          
              '<table border="1px" cellpadding="5px" cellspacing="1px" >

			<tr>
			  <td><b>Variable</b></td>
			  <td><b>Description</b></td>
			</tr>
                        
                        <tr>
			 <td>$_SERVER[\'PHP_SELF\']</td>
			 <td>The filename of the currently executing script, relative to the document root</td>
			</tr>

                        <tr>
			 <td>$_SERVER[\'argv\']</td>
			 <td>Array of arguments passed to the script. When the script is run on the command line, this gives C-style access to the command line parameters. When called via the GET method, this will contain the query string.</td>
			</tr>

                       <tr>
			 <td>$_SERVER[\'argc\']</td>
			 <td>Contains the number of command line parameters passed to the script if run on the command line.</td>
			</tr>

                        <tr>
			 <td>$_SERVER[\'GATEWAY_INTERFACE\']</td>
			 <td>What revision of the CGI specification the server is using; i.e. \'CGI/1.1\'.</td>
			</tr>

                       <tr>
			 <td>$_SERVER[\'SERVER_ADDR\']</td>
			 <td>The IP address of the server under which the current script is executing.</td>
			</tr>

                       <tr>
			 <td>$_SERVER[\'SERVER_NAME\']</td>
			 <td>The name of the server host under which the current script is executing. If the script is running on a virtual host, this will be the value defined for that virtual host.</td>
			</tr>

                        <tr>
			 <td>$_SERVER[\'SERVER_SOFTWARE\']</td>
			 <td>Server identification string, given in the headers when responding to requests.</td>
			</tr>

                        <tr>
			 <td>$_SERVER[\'SERVER_PROTOCOL\']</td>
			 <td>Name and revision of the information protocol via which the page was requested; i.e. \'HTTP/1.0\';</td>
			</tr>

                        <tr>
			 <td>$_SERVER[\'REQUEST_METHOD\']</td>
			 <td>Which request method was used to access the page; i.e. \'GET\', \'HEAD\', \'POST\', \'PUT\'.</td>
			</tr>

                         <tr>
			 <td>$_SERVER[\'REQUEST_TIME\']</td>
			 <td>The timestamp of the start of the request. Available since PHP 5.1.0.</td>
			</tr>

                        <tr>
			 <td>$_SERVER[\'QUERY_STRING\']</td>
			 <td>The query string, if any, via which the page was accessed.</td>
			</tr>

                        <tr>
			 <td>$_SERVER[\'DOCUMENT_ROOT\']</td>
			 <td>The document root directory under which the current script is executing, as defined in the server\'s configuration file.</td>
			</tr>

                        <tr>
			 <td>$_SERVER[\'HTTP_ACCEPT\']</td>
			 <td>Contents of the Accept: header from the current request, if there is one.</td>
			</tr>
                        
                        <tr>
			 <td>$_SERVER[\'HTTP_ACCEPT_CHARSET\']</td>
			 <td>Contents of the Accept-Charset: header from the current request, if there is one. Example: \'iso-8859-1,*,utf-8\'.</td>
			</tr>

                        <tr>
			 <td>$_SERVER[\'HTTP_ACCEPT_ENCODING\']</td>
			 <td>Contents of the Accept-Encoding: header from the current request, if there is one. Example: \'gzip\'.</td>
			</tr>

                        <tr>
			 <td>$_SERVER[\'HTTP_ACCEPT_LANGUAGE\']</td>
			 <td>Contents of the Accept-Language: header from the current request, if there is one. Example: \'en\'.</td>
			</tr>
			
			<tr>
			 <td>$_SERVER[\'HTTP_CONNECTION\']</td>
			 <td>Contents of the Connection: header from the current request, if there is one. Example: \'Keep-Alive\'.</td>
			</tr>
			
			<tr>
			 <td>$_SERVER[\'HTTP_HOST\']</td>
			 <td>Contents of the Host: header from the current request, if there is one.</td>
			</tr>

			<tr>
			 <td>$_SERVER[\'HTTP_REFERER\']</td>
			 <td>The address of the page (if any) which referred the user agent to the current page.</td>
			</tr>

			<tr>
			 <td>$_SERVER[\'HTTP_USER_AGENT\']</td>
			 <td>This is a string denoting the user agent being which is accessing the page. A typical example is: Mozilla/4.5 [en] (X11; U; Linux 2.2.9 i586).</td>
			</tr>

			<tr>
			 <td>$_SERVER[\'HTTPS\']</td>
			 <td>Set to a non-empty value if the script was queried through the HTTPS protocol.</td>
			</tr>

			<tr>
			 <td>$_SERVER[\'REMOTE_ADDR\']</td>
			 <td>The IP address from which the user is viewing the current page.</td>
			</tr>

			<tr>
			 <td>$_SERVER[\'REMOTE_HOST\']</td>
			 <td>The Host name from which the user is viewing the current page. The reverse dns lookup is based off the REMOTE_ADDR of the user.</td>
			</tr>

			<tr>
			 <td>$_SERVER[\'REMOTE_PORT\']</td>
			 <td>The port being used on the user\'s machine to communicate with the web server.</td>
			</tr>
			
			<tr>
			 <td>$_SERVER[\'SCRIPT_FILENAME\']</td>
			 <td>The absolute pathname of the currently executing script.</td>
			</tr>
			
			<tr>
			 <td>$_SERVER[\'SERVER_ADMIN\']</td>
			 <td>The value given to the SERVER_ADMIN (for Apache) directive in the web server configuration file.</td>
			</tr>
			
			<tr>
			 <td>$_SERVER[\'SERVER_PORT\']</td>
			 <td>The port on the server machine being used by the web server for communication. For default setups, this will be \'80\'.</td>
			</tr>
			
			<tr>
			 <td>$_SERVER[\'SERVER_SIGNATURE\']</td>
			 <td>String containing the server version and virtual host name which are added to server-generated pages, if enabled.</td>
			</tr>
			
			<tr>
			 <td>$_SERVER[\'PATH_TRANSLATED\']</td>
			 <td>Filesystem based path to the current script.</td>
			</tr>
			
			<tr>
			 <td>$_SERVER[\'SCRIPT_NAME\']</td>
			 <td>Contains the current script\'s path. This is useful for pages which need to point to themselves.</td>
			</tr>

			<tr>
			 <td>$_SERVER[\'REQUEST_URI\']</td>
			 <td>The URI which was given in order to access this page; for instance, \'/index.html\'.</td>
			</tr>

			<tr>
			 <td>$_SERVER[\'PHP_AUTH_DIGEST\']</td>
			 <td>When running under Apache as module doing Digest HTTP authentication this variable is set to the \'Authorization\' header sent by the client.</td>
			</tr>
			
			<tr>
			 <td>$_SERVER[\'PHP_AUTH_USER\']</td>
			 <td>When running under Apache or IIS (ISAPI on PHP 5) as module doing HTTP authentication this variable is set to the username provided by the user.</td>
			</tr>

			<tr>
			 <td>$_SERVER[\'PHP_AUTH_PW\']</td>
			 <td>When running under Apache or IIS (ISAPI on PHP 5) as module doing HTTP authentication this variable is set to the password provided by the user.</td>
			</tr>

			<tr>
			 <td>$_SERVER[\'AUTH_TYPE\']</td>
			 <td>When running under Apache as module doing HTTP authenticated this variable is set to the authentication type.</td>
			</tr>

			<tr>
			 <td>Mercedes</td>
			 <td>Orange</td>
			</tr>

			<tr>
			 <td>Mercedes</td>
			 <td>Orange</td>
			</tr>


                  </table>             ')

				
				
**************************************************************************************************************************************************************************************************************************************************



  
  
 




